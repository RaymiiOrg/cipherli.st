---
ciphers:
  - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
  - TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA
  - TLS_RSA_WITH_AES_256_GCM_SHA384
  - TLS_RSA_WITH_AES_256_CBC_SHA

protocols:
  - TLSv1.2 # tls.VersionTLS12

config: |
  package main

  import (
      "crypto/tls"
      "log"
      "net/http"
  )

  func main() {
      mux := http.NewServeMux()
      mux.HandleFunc("/", func(w http.ResponseWriter, req *http.Request) {
          w.Header().Add("Strict-Transport-Security", "max-age=63072000; includeSubDomains")
          w.Write([]byte("This is an example server.\n"))
      })
      cfg := &tls.Config{
          MinVersion:               tls.VersionTLS12,
          CurvePreferences:         []tls.CurveID{tls.CurveP521, tls.CurveP384, tls.CurveP256},
          PreferServerCipherSuites: true,
          CipherSuites: []uint16{
              tls.TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,
              tls.TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,
              tls.TLS_RSA_WITH_AES_256_GCM_SHA384,
              tls.TLS_RSA_WITH_AES_256_CBC_SHA,
          },
      }
      srv := &http.Server{
          Addr:         ":443",
          Handler:      mux,
          TLSConfig:    cfg,
          TLSNextProto: make(map[string]func(*http.Server, *tls.Conn, http.Handler), 0),
      }
      log.Fatal(srv.ListenAndServeTLS("tls.crt", "tls.key"))
  }
